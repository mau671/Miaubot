name: Build Executables

on:
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        platform: [linux-amd64, linux-arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for version info

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get version info
      id: version
      run: |
        VERSION=$(cat VERSION)
        GIT_HASH=$(git rev-parse --short HEAD)
        GIT_DIRTY=$(git diff --quiet || echo "-dirty")
        FULL_VERSION="${VERSION}+${GIT_HASH}${GIT_DIRTY}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "git_hash=${GIT_HASH}" >> $GITHUB_OUTPUT
        echo "full_version=${FULL_VERSION}" >> $GITHUB_OUTPUT

    - name: Build executable for ${{ matrix.platform }}
      run: |
        echo "Building for ${{ matrix.platform }}..."
        
        # Create build directory
        mkdir -p dist
        
        # Set platform mapping
        case "${{ matrix.platform }}" in
          "linux-amd64")
            DOCKER_PLATFORM="linux/amd64"
            ;;
          "linux-arm64")
            DOCKER_PLATFORM="linux/arm64"
            ;;
        esac
        
        # Build using Docker
        docker buildx build \
          --platform "${DOCKER_PLATFORM}" \
          --file Dockerfile.build \
          --target export \
          --output dist/ \
          .
        
        # Find and ensure correct naming of the executable
        EXPECTED_NAME="dist/miaubot-${{ matrix.platform }}"
        EXECUTABLE_FILE=$(find dist/ -name "miaubot-linux-*" -type f | head -1)
        
        if [ -n "$EXECUTABLE_FILE" ] && [ -f "$EXECUTABLE_FILE" ]; then
          # Only rename if the file doesn't already have the correct name
          if [ "$EXECUTABLE_FILE" != "$EXPECTED_NAME" ]; then
            echo "Renaming $EXECUTABLE_FILE to $EXPECTED_NAME"
            mv "$EXECUTABLE_FILE" "$EXPECTED_NAME"
          else
            echo "File already has correct name: $EXPECTED_NAME"
          fi
          
          chmod +x "$EXPECTED_NAME"
          echo "Successfully built: $EXPECTED_NAME"
          ls -lah "$EXPECTED_NAME"
        else
          echo "Error: Executable not found"
          exit 1
        fi

    - name: Test executable (AMD64 only)
      if: matrix.platform == 'linux-amd64'
      run: |
        echo "Testing executable..."
        ./dist/miaubot-${{ matrix.platform }} --help

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: miaubot-${{ matrix.platform }}-${{ steps.version.outputs.full_version }}
        path: dist/miaubot-${{ matrix.platform }}
        retention-days: 30

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version info
      id: version
      run: |
        VERSION=$(cat VERSION)
        GIT_HASH=$(git rev-parse --short HEAD)
        FULL_VERSION="${VERSION}+${GIT_HASH}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "full_version=${FULL_VERSION}" >> $GITHUB_OUTPUT

    - name: Build Status Summary
      run: |
        echo "## ðŸš€ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Full Version:** ${{ steps.version.outputs.full_version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
        echo "- miaubot-linux-amd64" >> $GITHUB_STEP_SUMMARY
        echo "- miaubot-linux-arm64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Artifacts will be available for download for 30 days." >> $GITHUB_STEP_SUMMARY 