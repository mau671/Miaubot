name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      is_valid: ${{ steps.validate.outputs.is_valid }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate version format
      id: validate
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        # Validate semantic versioning format
        if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "✅ Version format is valid: $VERSION"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_valid=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Invalid version format: $VERSION"
          echo "Version must follow semantic versioning (e.g., 1.0.0, 1.0.0-beta)"
          echo "is_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Check if version already exists
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if git tag -l | grep -q "^v${VERSION}$"; then
          echo "❌ Version tag v${VERSION} already exists"
          exit 1
        else
          echo "✅ Version v${VERSION} is available"
        fi

  update-version:
    name: Update Version Files
    runs-on: ubuntu-latest
    needs: validate-version
    if: needs.validate-version.outputs.is_valid == 'true'
    
    outputs:
      commit_sha: ${{ steps.commit.outputs.commit_sha }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Update VERSION file
      run: |
        echo "${{ needs.validate-version.outputs.version }}" > VERSION
        git add VERSION

    - name: Commit version update
      id: commit
      run: |
        git commit -m "chore: bump version to v${{ needs.validate-version.outputs.version }}"
        COMMIT_SHA=$(git rev-parse HEAD)
        echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
        git push origin main

  build-release:
    name: Build Release Executables
    runs-on: ubuntu-latest
    needs: [validate-version, update-version]
    
    strategy:
      matrix:
        platform: [linux-amd64, linux-arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.update-version.outputs.commit_sha }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build executable for ${{ matrix.platform }}
      run: |
        echo "Building release executable for ${{ matrix.platform }}..."
        
        # Create build directory
        mkdir -p dist
        
        # Set platform mapping
        case "${{ matrix.platform }}" in
          "linux-amd64")
            DOCKER_PLATFORM="linux/amd64"
            ;;
          "linux-arm64")
            DOCKER_PLATFORM="linux/arm64"
            ;;
        esac
        
        # Build using Docker
        docker buildx build \
          --platform "${DOCKER_PLATFORM}" \
          --file Dockerfile.build \
          --target export \
          --output dist/ \
          .
        
        # Find and rename the executable
        EXECUTABLE_FILE=$(find dist/ -name "miaubot-linux-*" -type f | head -1)
        if [ -n "$EXECUTABLE_FILE" ] && [ -f "$EXECUTABLE_FILE" ]; then
          mv "$EXECUTABLE_FILE" "dist/miaubot-${{ matrix.platform }}"
          chmod +x "dist/miaubot-${{ matrix.platform }}"
          echo "Successfully built: dist/miaubot-${{ matrix.platform }}"
          ls -lah "dist/miaubot-${{ matrix.platform }}"
          
          # Create compressed archive
          tar -czf "dist/miaubot-${{ matrix.platform }}-v${{ needs.validate-version.outputs.version }}.tar.gz" \
            -C dist "miaubot-${{ matrix.platform }}"
        else
          echo "Error: Executable not found"
          exit 1
        fi

    - name: Test executable (AMD64 only)
      if: matrix.platform == 'linux-amd64'
      run: |
        echo "Testing release executable..."
        ./dist/miaubot-${{ matrix.platform }} --help

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: miaubot-${{ matrix.platform }}-v${{ needs.validate-version.outputs.version }}
        path: |
          dist/miaubot-${{ matrix.platform }}
          dist/miaubot-${{ matrix.platform }}-v${{ needs.validate-version.outputs.version }}.tar.gz
        retention-days: 90

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: [validate-version, update-version]
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.update-version.outputs.commit_sha }}
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="v${{ needs.validate-version.outputs.version }}"
        
        # Get the previous tag
        PREVIOUS_TAG=$(git tag -l --sort=-version:refname | head -1 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "This is the first release"
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "Previous tag: $PREVIOUS_TAG"
          COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Create changelog
        echo "## 🚀 What's New in ${VERSION}" > changelog.md
        echo "" >> changelog.md
        echo "**Release Date:** $(date +'%Y-%m-%d')" >> changelog.md
        echo "" >> changelog.md
        echo "### 📝 Changes" >> changelog.md
        echo "${COMMITS}" >> changelog.md
        echo "" >> changelog.md
        echo "### 📦 Assets" >> changelog.md
        echo "- \`miaubot-linux-amd64-${VERSION}.tar.gz\` - Linux AMD64 executable" >> changelog.md
        echo "- \`miaubot-linux-arm64-${VERSION}.tar.gz\` - Linux ARM64 executable" >> changelog.md
        echo "" >> changelog.md
        echo "### 🔧 Installation" >> changelog.md
        echo "\`\`\`bash" >> changelog.md
        echo "# Download and extract for your platform" >> changelog.md
        echo "wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/miaubot-linux-amd64-${VERSION}.tar.gz" >> changelog.md
        echo "tar -xzf miaubot-linux-amd64-${VERSION}.tar.gz" >> changelog.md
        echo "chmod +x miaubot-linux-amd64" >> changelog.md
        echo "./miaubot-linux-amd64 --help" >> changelog.md
        echo "\`\`\`" >> changelog.md
        echo "" >> changelog.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${VERSION}" >> changelog.md
        
        # Save to output
        {
          echo 'changelog<<CHANGELOG_EOF'
          cat changelog.md
          echo 'CHANGELOG_EOF'
        } >> $GITHUB_OUTPUT

    - name: Upload changelog
      uses: actions/upload-artifact@v4
      with:
        name: changelog-v${{ needs.validate-version.outputs.version }}
        path: changelog.md

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-version, update-version, build-release, generate-changelog]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.update-version.outputs.commit_sha }}

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts/ -name "*.tar.gz" -exec cp {} release-assets/ \;
        find artifacts/ -name "miaubot-linux-*" -type f ! -name "*.tar.gz" -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Create Git tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ needs.validate-version.outputs.version }}" -m "Release v${{ needs.validate-version.outputs.version }}"
        git push origin "v${{ needs.validate-version.outputs.version }}"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ needs.validate-version.outputs.version }}"
        name: "MiauBot v${{ needs.validate-version.outputs.version }}"
        body: ${{ needs.generate-changelog.outputs.changelog }}
        prerelease: ${{ github.event.inputs.prerelease }}
        files: |
          release-assets/*
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Release Summary
      run: |
        echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** v${{ needs.validate-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** v${{ needs.validate-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Prerelease:** ${{ github.event.inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Release Assets:" >> $GITHUB_STEP_SUMMARY
        echo "- miaubot-linux-amd64-v${{ needs.validate-version.outputs.version }}.tar.gz" >> $GITHUB_STEP_SUMMARY
        echo "- miaubot-linux-arm64-v${{ needs.validate-version.outputs.version }}.tar.gz" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Release URL:** https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY 